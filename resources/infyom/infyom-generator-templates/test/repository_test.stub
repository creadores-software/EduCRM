<?php namespace $NAMESPACE_REPOSITORIES_TESTS$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Validator;
use $NAMESPACE_TESTS$\TestCase;

class $MODEL_NAME$RepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var $MODEL_NAME$Repository
     */
    protected $$MODEL_NAME_CAMEL$Repo;

    public function setUp() : void
    {
        parent::setUp();
        $this->$MODEL_NAME_CAMEL$Repo = \App::make($MODEL_NAME$Repository::class);
    }

    /**
     * @test crear
     */
    public function test_crear_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->make()->toArray();

        $rules = (new Create$MODEL_NAME$Request())->rules();
        $validator = Validator::make($$MODEL_NAME_CAMEL$, $rules);
        $this->assertEquals(false, $validator->fails(),'El modelo no pasó la validación de las reglas.');

        $objeto$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->create($$MODEL_NAME_CAMEL$);
        $objeto$MODEL_NAME$ = $objeto$MODEL_NAME$->toArray();

        $this->assertArrayHasKey('id', $objeto$MODEL_NAME$, 'El modelo creado debe tener un id especificado.');
        $this->assertNotNull($objeto$MODEL_NAME$['id'], 'El id del modelo no debe ser nulo.');
        $this->assertNotNull($MODEL_NAME$::find($objeto$MODEL_NAME$['id']), 'El modelo no quedó registrado en la BD.');
        $this->assertModelData($$MODEL_NAME_CAMEL$, $objeto$MODEL_NAME$,'El modelo guardado no coincide con el creado.');        
        
        //Valida después de creado con los mismos datos (repetido)
        $validator = Validator::make($$MODEL_NAME_CAMEL$, $rules);
        $this->assertEquals(true, $validator->fails(),'El modelo no valida objetos repetidos.');
    }

    /**
     * @test consultar
     */
    public function test_consultar_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();

        $db$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->find($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);

        $db$MODEL_NAME$ = $db$MODEL_NAME$->toArray();
        $this->assertModelData($$MODEL_NAME_CAMEL$->toArray(), $db$MODEL_NAME$);
    }

    /**
     * @test editar
     */
    public function test_editar_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();
        $fake$MODEL_NAME$ = factory($MODEL_NAME$::class)->make()->toArray();

        $rules = (new Update$MODEL_NAME$Request())->rules();
        $validator = Validator::make($fake$MODEL_NAME$, $rules);
        $this->assertEquals(false, $validator->fails(),'El modelo no pasó la validación de las reglas.');

        $objeto$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->update($fake$MODEL_NAME$, $$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);

        $this->assertModelData($fake$MODEL_NAME$, $objeto$MODEL_NAME$->toArray(),'El modelo no quedó con los datos editados.');
        $db$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->find($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);
        $this->assertModelData($fake$MODEL_NAME$, $db$MODEL_NAME$->toArray(),'La edición no tuvo efectos en la BD.');
    }

    /**
     * @test eliminar
     */
    public function test_eliminar_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();

        $resp = $this->$MODEL_NAME_CAMEL$Repo->delete($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);

        $this->assertTrue($resp,'El proceso de eliminación no fue exitoso.');
        $this->assertNull($MODEL_NAME$::find($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$), 'El modelo no debe existir en BD.');
    }
}
