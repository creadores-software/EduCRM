<?php namespace $NAMESPACE_REPOSITORIES_TESTS$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use $NAMESPACE_TESTS$\TestCase;

class $MODEL_NAME$RepositoryTest extends TestCase
{
    use RefreshDatabase;
    use WithoutMiddleware;

    /**
     * @var $MODEL_NAME$Repository
     */
    protected $$MODEL_NAME_CAMEL$Repo;

    public function setUp() : void
    {
        parent::setUp();
        $this->$MODEL_NAME_CAMEL$Repo = \App::make($MODEL_NAME$Repository::class);
    }

    /**
     * @test crear
     */
    public function test_crear_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->make()->toArray();

        //Se intenta registrar y no debe generar ninguna excepción
        $url=route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.store');
        $response = $this->post($url, $$MODEL_NAME_CAMEL$); 
        $excepcion=null; 
        if(is_object($response->exception)){
            $excepcion=$response->exception->getMessage();
        }
        $this->assertNull($excepcion,'El modelo no fue creado correctamente.');
        
        //El último objeto corresponde con el creado
        $objeto$MODEL_NAME$ = $MODEL_NAME$::latest()->first()->toArray();
        $this->assertTrue($this->sonDatosIguales($$MODEL_NAME_CAMEL$, $objeto$MODEL_NAME$),'El modelo guardado no coincide con el creado.');                
        
        //Valida después de creado con los mismos datos (repetido) y debe generar error 422       
        $response = $this->post($url, $$MODEL_NAME_CAMEL$); 
        $status=200; 
        if(is_object($response->exception)){
            $status=$response->exception->status;
        }       
        $this->assertEquals(422,$status,'El modelo no valida objetos repetidos.');
    }

    /**
     * @test consultar
     */
    public function test_consultar_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();
        $db$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->find($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);
        $db$MODEL_NAME$ = $db$MODEL_NAME$->toArray();
        $this->assertTrue($this->sonDatosIguales($$MODEL_NAME_CAMEL$->toArray(),$db$MODEL_NAME$),'El modelo consultado no coincide con el creado');
    }

    /**
     * @test editar
     */
    public function test_editar_$MODEL_NAME_SNAKE$()
    {
        //Se crea un objeto y se generan datos para edición  
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();
        $fake$MODEL_NAME$ = factory($MODEL_NAME$::class)->make()->toArray();  
        
        //Se intenta editar y no debe generar ninguna excepción
        $url = route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.update', $$MODEL_NAME_CAMEL$->id);
        $response = $this->patch($url,$fake$MODEL_NAME$); 
        $excepcion=null; 
        if(is_object($response->exception)){
            $excepcion=$response->exception->getMessage();
        }
        $this->assertNull($excepcion,'El modelo no fue editado correctamente.');
        
        //El modelo actual debe tener los datos que se enviaron para edición
        $objeto$MODEL_NAME$ = $MODEL_NAME$::find($$MODEL_NAME_CAMEL$->id);
        $this->assertTrue($this->sonDatosIguales($fake$MODEL_NAME$, $objeto$MODEL_NAME$->toArray()),'El modelo no quedó con los datos editados.');       
    }

    /**
     * @test eliminar
     */
    public function test_eliminar_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = factory($MODEL_NAME$::class)->create();
        $resp = $this->$MODEL_NAME_CAMEL$Repo->delete($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$);
        $this->assertNull($MODEL_NAME$::find($$MODEL_NAME_CAMEL$->$PRIMARY_KEY_NAME$), 'El modelo no debe existir en BD.');
    }
}
